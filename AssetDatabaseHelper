import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.channels.FileChannel;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Environment;

/**
 * A helper class the import and export db files. </ br> Example to import from
 * </ br> "{@code /assets/example.sqlite}" </ br>
 * {@code new AssetDAtabaseHelper(context,"example.sqlite").importIfNotExisit();}
 * {@code new AssetDAtabaseHelper(context,"example.sqlite").exportDatabase(data.db, "/data/theNewDb.sqlite");}
 * 
 * @version 2
 * @author WillieTsang
 * 
 */
public class AssetDatabaseHelper extends SQLiteOpenHelper {

	private String dbName;
	private String db_path;
	private Context context;

	/**
	 * A helper class to import/export db files.
	 * 
	 * @param context
	 *            base/app context
	 * @param dbName
	 *            The name of the db in asset folder .
	 */
	public AssetDatabaseHelper(Context context, String dbName) {
		super(context, dbName, null, 1);
		this.dbName = dbName;
		this.context = context;
		this.db_path = context.getDatabasePath(dbName).getAbsolutePath();
	}

	/**
	 * Check if the database already exist to avoid re-copying the file each
	 * time you open the application.
	 * 
	 * @return true if it exists, false if it doesn't
	 */
	public boolean checkExist() {
		File dbFile = new File(db_path);
		return dbFile.exists();
	}

	/**
	 * Creates a empty database on the system and rewrites it with your own
	 * database.
	 * */
	public void importIfNotExist() throws IOException {
		boolean dbExist = checkExist();
		if (dbExist) {
			// do nothing - database already exist
		} else {
			this.getReadableDatabase();
			try {
				copyDatabase();
			} catch (IOException e) {
				throw new IOException("Error copying database");
			}
		}
	}

	/**
	 * Creates copies the database from asset to the new database location.
	 * */
	private void copyDatabase() throws IOException {
		InputStream is = context.getAssets().open(dbName);
		OutputStream os = new FileOutputStream(db_path);
		byte[] buffer = new byte[4096];
		int length;
		while ((length = is.read(buffer)) > 0) {
			os.write(buffer, 0, length);
		}
		os.flush();
		os.close();
		is.close();
		this.close();
	}

	/**
	 * Export a database for database directory of app to a destnation in sd
	 * card. Ex.</br>
	 * {@code this.exportDatabase(data.db, "/data/theNewDb.sqlite");} </br>
	 * {@code this.exportDatabase(data.sqlite, null);}
	 * @param dbName
	 *            name of database file including extension.
	 * @param exportDestPath
	 *            path in the device's external storage. Passing in {@code null}
	 *            will be exported to root of external storage.
	 */
	public void exportDatabase(String dbName, String exportDestSdPath) {
		if (exportDestSdPath == null) {
			exportDestSdPath = "/" + dbName;
		}
		try {
			File sd = Environment.getExternalStorageDirectory();
			if (sd.canWrite()) {
				String currentDBPath = context.getDatabasePath(dbName)
						.getAbsolutePath();
				String backupDBPath = exportDestSdPath;
				File currentDB = new File(currentDBPath);
				File backupDB = new File(sd + backupDBPath);
				if (currentDB.exists()) {

					FileInputStream src = new FileInputStream(currentDB);
					FileChannel srcCh = src.getChannel();
					FileOutputStream dest = null;
					if (backupDB.exists()) {
						dest = new FileOutputStream(backupDB);
					} else {
						if (backupDB.getParentFile().mkdirs()) {
							dest = new FileOutputStream(backupDB);
						} else {
							src.close();
							throw new IOException("Can't export db");
						}
					}

					FileChannel destCh = dest.getChannel();
					destCh.transferFrom(srcCh, 0, srcCh.size());
					src.close();
					dest.close();
				}
			}

		} catch (IOException e) {

			e.printStackTrace();
		}

	}

	/**
	 * @see #exportDatabase(String, String)
	 * @param exportDestSdPath
	 *            exportDestPath path in the device's external storage. Passing
	 *            in {@code null} will be exported to root of external storage.
	 */
	public void exportDatabase(String exportDestSdPath) {
		this.exportDatabase(this.dbName, exportDestSdPath);
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
	}

}
